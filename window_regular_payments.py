# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'СurrentСosts.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QDate, Qt
from PyQt5.QtWidgets import QMessageBox, QDateTimeEdit, QDateEdit

import main_window
from const import *
from window_del_customer import WindowDelCustomer
from window_new_division import NewDivision
from window_del_division import DelDivision
from window_new_customer import WindowNewCustomer
from window_order import Order

from request_base import Request
from tab_line_widget import LineWidget


class RegularPaymentWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()

        self.tab = None
        self.name_div = []
        self.date = []
        self.window_del_div = DelDivision(self)
        self.window_new_div = NewDivision(self)
        self.window_new_customer = WindowNewCustomer(self, self.tab)
        self.window_order_by_month = None

        self.setObjectName("CurrentPayment")
        self.setWindowTitle("Щомісячні витрати")
        # self.resize(850, 530)
        self.setFixedSize(FIX_SIZE_X, FIX_SIZE_Y)

        self.tabWidget = QtWidgets.QTabWidget(self)
        self.tabWidget.setGeometry(QtCore.QRect(20, 0, 610, 500))
        self.tabWidget.setObjectName("tabWidget")
        self.tab_widgets()

        self.layout_main_button()
        self.right_top_layout()

    def layout_main_button(self):
        """layout with main buttons"""
        self.verticalLayoutWidget = QtWidgets.QWidget(self)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(650, 340, 180, 170))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        """main buttons"""
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        """new division"""
        self.newdivision = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.newdivision.setObjectName("newdivision")
        self.verticalLayout.addWidget(self.newdivision)
        self.newdivision.setText("Створити новий розділ витрат")
        self.newdivision.clicked.connect(self.new_division)
        """delete division"""
        self.del_div_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.del_div_button.setObjectName("del_div_button")
        self.verticalLayout.addWidget(self.del_div_button)
        self.del_div_button.setText("Видалити розділ")
        self.del_div_button.clicked.connect(self.del_division)
        """close window"""
        self.closebutton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.closebutton.setObjectName("closebutton")
        self.verticalLayout.addWidget(self.closebutton)
        self.closebutton.setText("Закрити вікно")
        self.closebutton.clicked.connect(self.close)
        """exit from program"""
        self.close_program_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.close_program_button.setObjectName("close_program_button")
        self.verticalLayout.addWidget(self.close_program_button)
        self.close_program_button.setText("Вихід з програми")
        self.close_program_button.clicked.connect(main_window.MainWindow.push_button_exit)

    def tab_widgets(self):
        """Tab widget - division. Example '122' or 'Other'."""
        self.tabWidget.clear()

        sql_req = "SELECT * FROM system WHERE name_customer IS NULL ORDER BY div;"
        request = Request()
        data_tab = request.show_base(sql_req)

        if data_tab is not None:
            for id_div in data_tab:
                self.name_div.append(id_div[1])
                self.tab = QtWidgets.QWidget()
                self.tab.setObjectName(id_div[1])

                calendar_edit = QtWidgets.QDateEdit(self.tab)  # calendar
                calendar_edit.setGeometry(QtCore.QRect(50, 410, 90, 30))
                calendar_edit.setObjectName("calendar_dateEdit")
                calendar_edit.setCalendarPopup(True)
                calendar_edit.setDisplayFormat('dd-MM-yyyy')
                # calendar_edit.setCurrentSection(QDateEdit.MonthSection)
                calendar_edit.setDate(QDate.currentDate())
                self.date.append(calendar_edit)

                self.button_add_customer = QtWidgets.QPushButton(self.tab)
                self.button_add_customer.setGeometry(QtCore.QRect(150, 410, 100, 30))
                self.button_add_customer.setObjectName(f"add_customer{id_div[1]}")
                self.button_add_customer.setText("Додати послуги")
                self.button_add_customer.clicked.connect(self.add_customer)

                self.button_del_customer = QtWidgets.QPushButton(self.tab)
                self.button_del_customer.setGeometry(QtCore.QRect(260, 410, 100, 30))
                self.button_del_customer.setObjectName(f"del_customer{id_div[1]}")
                self.button_del_customer.setText("Видалити послуги")
                self.button_del_customer.clicked.connect(self.del_customer)

                self.pay_order_but = QtWidgets.QPushButton(self.tab)
                self.pay_order_but.setGeometry(QtCore.QRect(370, 410, 100, 30))
                self.pay_order_but.setObjectName("pay_order_but")
                self.pay_order_but.setText("Створити ордер")
                # self.pay_order_but.setWhatsThis('dfhssdhsdfhsh')
                self.pay_order_but.clicked.connect(self.make_order)

                self.refresh_but = QtWidgets.QPushButton(self.tab)
                self.refresh_but.setGeometry(QtCore.QRect(480, 410, 100, 30))
                self.refresh_but.setObjectName("refresh_but")
                self.refresh_but.setText("Оновити")
                self.refresh_but.clicked.connect(self.refresh)

                self.groupBox = QtWidgets.QGroupBox(self.tab)
                self.groupBox.setGeometry(QtCore.QRect(40, 30, 540, 360))
                self.groupBox.setObjectName("groupBox")
                self.groupBox.setTitle("Розрахунок поточних платежів:")
                """Full name of division"""
                self.label_full_name_div = QtWidgets.QLabel(self.groupBox)
                self.label_full_name_div.setGeometry(QtCore.QRect(60, 25, 250, 15))
                self.label_full_name_div.setAlignment(QtCore.Qt.AlignLeft)
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setBold(True)
                self.label_full_name_div.setFont(font)
                self.label_full_name_div.setObjectName("full_name_div")
                self.label_full_name_div.setText(f"{id_div[2]}")

                self.gridLayout_tab = QtWidgets.QWidget(self.groupBox)
                self.gridLayout_tab.setGeometry(QtCore.QRect(10, 50, 520, 300))  # size layout
                self.gridLayout_tab.setObjectName("gridLayout_tab")

                self.gridLayout = QtWidgets.QGridLayout(self.gridLayout_tab)
                self.gridLayout.setContentsMargins(0, 0, 0, 0)
                self.gridLayout.setObjectName("gridLayout")

                """ head labels into tabs for widgets """
                self.write_header_for_widgets("name_customer", "Постачальник:", 0, 0, 1, 1)
                self.write_header_for_widgets("price", "Ціна, грн:", 0, 1, 1, 1)
                self.write_header_for_widgets("counter_old", "Старі показники:", 0, 2, 1, 1)
                self.write_header_for_widgets("counter_new", "Нові показники:", 0, 3, 1, 1)
                self.write_header_for_widgets("total", "Сума до сплати:", 0, 4, 1, 1)
                self.write_header_for_widgets("button", " ", 0, 5, 1, 1)

                """ empty string (--------) """
                for i in range(6):
                    self.write_header_for_widgets("space", "-------------------", 1, i, 1, 1)

                """ system data from db for tab_line_widget """
                sql_req = f"SELECT name_customer, first_price, first_counter FROM system " \
                          f"WHERE name_customer IS NOT NULL AND div = '{id_div[1]}' " \
                          f"ORDER BY id;"
                request = Request()
                sys_widget_string = request.show_base(sql_req)

                """ widget lines """
                line = 2  # 0 and 1 row reserved for header
                for i in sys_widget_string:
                    lw = LineWidget(self.gridLayout_tab, self.gridLayout, calendar_edit, id_div[1], i[0], i[1],
                                    i[2])
                    lw.create_line_customer_widget(line)
                    line += 1

                spacer_item = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum,
                                                    QtWidgets.QSizePolicy.Expanding)
                self.gridLayout.addItem(spacer_item, 100, 1, 1, 1)

                self.tabWidget.addTab(self.tab, id_div[1])
                # self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), id_div[1])
        else:
            self.label_start_reg_pay = QtWidgets.QLabel(self)
            self.label_start_reg_pay.setGeometry(QtCore.QRect(200, 200, 300, 200))
            self.label_start_reg_pay.setObjectName("label")
            self.label_start_reg_pay.setText("Create new regular divivsion for payments")

    def right_top_layout(self):
        self.label = QtWidgets.QLabel(self)
        self.label.setGeometry(QtCore.QRect(660, 20, 160, 40))
        self.label.setObjectName("label")
        self.label.setText("Обов\'язкові поточні платежи")

        """   Line in top  """
        self.__line("line_in_top", 650, 50, 180, 20)

        """ right-top layout """
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(650, 70, 180, 170))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")

        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(15, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        request = Request()
        req = f"SELECT name_pay, money FROM payments WHERE div_pay = {self.name_div[self.tabWidget.currentIndex()]} " \
              f"NOT NULL ORDER BY date DESC LIMIT 4"
        sys_widget_string = request.show_base(req)
        print("Data:", sys_widget_string)
        # sys_widget_string = build_list_arrears(id_div[1])
        # sys_widget_string = [("water", 40.25, 10),
        #                      ("gas", 7.68, 1230.789),
        #                      ("internet", 160.0, None),
        #                      ("osbb", 456.37, None),
        #                      ("electric", 1.68, 2568),
        #                      ("phone", 140, None),
        #                      ("sequrity", 190, None),
        #                      ]
        total = 0
        for i in sys_widget_string:
            self.label_customer = QtWidgets.QLabel(self)
            self.label_customer.setAlignment(QtCore.Qt.AlignLeft)
            self.label_customer.setObjectName(i[0])
            # print(f"{i[0]:<15}: {i[1]:<10}")
            self.label_customer.setText(f"{i[0]:<20}: {i[1]:>10}")
            self.verticalLayout_2.addWidget(self.label_customer)
            total += i[1]

        self.label_customer1 = QtWidgets.QLabel(self)
        self.label_customer1.setAlignment(QtCore.Qt.AlignLeft)
        self.label_customer1.setObjectName("label_customer1")
        self.label_customer1.setText(f"{'-' * 30}")
        self.verticalLayout_2.addWidget(self.label_customer1)

        self.label_customer_total = QtWidgets.QLabel(self)
        self.label_customer_total.setAlignment(QtCore.Qt.AlignLeft)
        self.label_customer_total.setObjectName("label_customer_total")
        self.label_customer_total.setText(f"{'Сума':<20}: {round(total, 2):>10}")
        self.verticalLayout_2.addWidget(self.label_customer_total)

        spacer_item2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum,
                                             QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacer_item2)

        """ right-middle line """
        self.__line("line_right_middle ", 650, 220, 180, 70)

        """ middle layout """
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(650, 265, 180, 60))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")

        self.vertical_layout_balance = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.vertical_layout_balance.setContentsMargins(0, 0, 0, 0)
        self.vertical_layout_balance.setObjectName("vertical_layout_balance")

        self.__create_label_for_balance_layout("     Місячний баланс")
        self.__create_label_for_balance_layout("Сплачено: 0 грн.")
        self.__create_label_for_balance_layout("Заборгованість: 2000 грн.")

        """  Line under main buttons"""
        self.__line("line_under_main_buttons", 650, 330, 180, 20)
        """  Bottom line   """
        self.__line("line_bottom", 20, 500, 810, 25)

    def new_division(self):
        self.window_new_div.show()

    def del_division(self):
        self.window_del_div.show()

    def add_customer(self):
        tab_div = self.tabWidget.currentIndex()
        print(f"Added customer to div:", self.name_div[tab_div])
        dlg = WindowNewCustomer(self, self.name_div[tab_div])
        dlg.exec()
        self.refresh()

    def del_customer(self):
        tab_div = self.tabWidget.currentIndex()
        print(f"Deleted customer from div:", self.name_div[tab_div])
        dlg = WindowDelCustomer(self, self.name_div[tab_div])
        dlg.exec()
        self.refresh()

    def make_order(self):
        tab_div = self.tabWidget.currentIndex()
        date = self.date[tab_div]
        self.window_order_by_month = Order(self, self.name_div[tab_div], date)
        self.window_order_by_month.show()
        # print("Under development!")
        # QMessageBox.information(self, 'Under development!', 'Under development!', QMessageBox.Ok, QMessageBox.Ok)

    def refresh(self):
        tab_div = self.tabWidget.currentIndex()
        self.tab_widgets()
        self.tabWidget.setCurrentIndex(tab_div)

    def write_header_for_widgets(self, name_label, text, p1, p2, p3, p4):
        label = QtWidgets.QLabel(self)
        label.setAlignment(QtCore.Qt.AlignCenter)
        label.setObjectName(name_label)
        label.setText(text)
        self.gridLayout.addWidget(label, p1, p2, p3, p4)

    def __line(self, name, x1, y1, x2, y2):
        self.line_bottom = QtWidgets.QFrame(self)
        self.line_bottom.setGeometry(QtCore.QRect(x1, y1, x2, y2))
        self.line_bottom.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_bottom.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_bottom.setObjectName(name)

    def __create_label_for_balance_layout(self, text):
        label_for_layout = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        label_for_layout.setObjectName("label_for_layout")
        label_for_layout.setText(text)
        self.vertical_layout_balance.addWidget(label_for_layout)

    def keyPressEvent(self, e):
        if e.key() == Qt.Key_Escape:
            self.close()
